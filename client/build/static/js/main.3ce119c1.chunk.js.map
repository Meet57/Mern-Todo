{"version":3,"sources":["api.js","TodoList.js","TodoForm.js","CreateTodo.js","EditTodo.js","App.js","serviceWorker.js","index.js"],"names":["updateTodo","todo","id","fetch","method","headers","body","JSON","stringify","TodoList","useState","items","setItems","useEffect","a","then","res","json","todos","fetchItems","className","map","key","_id","text","to","TodoForm","onSubmit","useForm","defaultValues","register","submitHandler","handleSubmit","data","htmlFor","ref","type","name","CreateTodo","history","useHistory","push","EditTodo","match","useRouteMatch","setTodo","params","fetchTodo","App","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.3ce119c1.chunk.js","sourcesContent":["export const getTodos = () => fetch(\"/api/\").then(res => { \r\n  \r\n  return res.json() })\r\n\r\nexport const createTodo = (todo) => fetch(\"/api/create\", {\r\n  method: \"POST\",\r\n  headers: {\r\n    \"Accept\": \"application/json\",\r\n    \"Content-Type\": \"application/json\"\r\n  },\r\n  body: JSON.stringify(todo)\r\n})\r\n\r\nexport const updateTodo = (todo, id) => fetch(`/api/${id}`, {\r\n  method: \"POST\",\r\n  headers: {\r\n    \"Accept\": \"application/json\",\r\n    \"Content-Type\": \"application/json\"\r\n  },\r\n  body: JSON.stringify(todo)\r\n})\r\n\r\nexport const getTodo = (id) => fetch(`/api/${id}`).then(res => res.json())","import React, { useState, useEffect } from \"react\";\r\nimport { Link } from 'react-router-dom'\r\nimport { getTodos } from \"./api\"\r\n\r\nexport const TodoList = () => {\r\n  const [items, setItems] = useState([])\r\n\r\n  useEffect(() => {\r\n    const fetchItems = async () => {\r\n      const todos = await getTodos()\r\n      setItems(todos)\r\n    }\r\n    fetchItems()\r\n  }, [])\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <div className=\"mt-3\">\r\n        <h3>Todo List</h3>\r\n        <table className=\"table table-striped mt-3\">\r\n          <thead>\r\n            <tr>\r\n              <th>Text</th>\r\n              <th>Action</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {\r\n              items.map(todo => {\r\n                return (\r\n                  <tr key={todo._id}>\r\n                    <td>\r\n                      {todo.text}\r\n                    </td>\r\n                    <td>\r\n                      <Link to={`/edit/${todo._id}`}>Edit</Link>\r\n                    </td>\r\n                  </tr>\r\n                )\r\n              })\r\n            }\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { useForm } from \"react-hook-form\";\r\n\r\nexport const TodoForm = ({ todo, onSubmit }) => {\r\n  const { register, handleSubmit } = useForm({\r\n    defaultValues: { text: todo ? todo.text : \"\" },\r\n  });\r\n\r\n  const submitHandler = handleSubmit((data) => {\r\n    onSubmit(data)\r\n  });\r\n\r\n  return (\r\n    <form onSubmit={submitHandler}>\r\n      <div className=\"form-group\">\r\n        <label htmlFor=\"text\">Text:</label>\r\n        <input\r\n          className=\"form-control\"\r\n          ref={register}\r\n          type=\"text\"\r\n          name=\"text\"\r\n          id=\"text\"\r\n        />\r\n      </div>\r\n      <div className=\"form-group\">\r\n        <button type=\"submit\" className=\"btn btn-primary\">\r\n          Save Todo\r\n        </button>\r\n      </div>\r\n    </form>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { TodoForm } from \"./TodoForm\";\r\nimport { createTodo } from \"./api\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nexport const CreateTodo = () => {\r\n  const history = useHistory()\r\n  \r\n  const onSubmit = async (data) => {\r\n    await createTodo(data)\r\n    history.push(\"/\")\r\n  };\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <div className=\"mt-3\">\r\n        <h3>Create Todo Item</h3>\r\n        <TodoForm onSubmit={onSubmit} />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { TodoForm } from \"./TodoForm\";\r\nimport { useRouteMatch, useHistory } from \"react-router-dom\";\r\nimport { getTodo, updateTodo } from \"./api\";\r\n\r\nexport const EditTodo = () => {\r\n  const match = useRouteMatch()\r\n  const [todo, setTodo] = useState();\r\n  const history = useHistory()\r\n\r\n  useEffect(() => {\r\n    const fetchTodo = async () => {\r\n      const todo = await getTodo(match.params.id)\r\n      setTodo(todo)\r\n    }\r\n    fetchTodo()\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, []);\r\n\r\n  const onSubmit = async (data) => {\r\n    await updateTodo(data, match.params.id)\r\n    history.push(\"/\")\r\n  }\r\n\r\n  return todo ? (\r\n    <div className=\"container\">\r\n      <div className=\"mt-3\">\r\n        <h3>Edit Todo Item</h3>\r\n        <TodoForm todo={todo} onSubmit={onSubmit}/>\r\n      </div>\r\n    </div>\r\n  ) : (\r\n    <div>Loading...</div>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport { Route, Switch, Link } from 'react-router-dom'\r\nimport { TodoList } from './TodoList'\r\nimport { CreateTodo } from './CreateTodo'\r\nimport { EditTodo } from './EditTodo'\r\n\r\nfunction App() {\r\n  return (\r\n    <div>\r\n      <nav className=\"navbar bg-light navbar-expand-lg navbar-light\">\r\n        <ul className=\"navbar-nav mr-auto\">\r\n          <li className=\"navbar-item\">\r\n            <Link to=\"/\" className=\"nav-link\">Todos</Link>\r\n          </li>\r\n          <li className=\"navbar-item\">\r\n            <Link to=\"/create\" className=\"nav-link\">Create Todo</Link>\r\n          </li>\r\n        </ul>\r\n      </nav>\r\n    <Switch>\r\n      <Route exact path=\"/\" component={TodoList}/>\r\n      <Route path=\"/edit/:id\" component={EditTodo}/>\r\n      <Route path=\"/create\" component={CreateTodo}/>\r\n    </Switch>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\nimport App from './App';\r\nimport { BrowserRouter } from 'react-router-dom'\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <BrowserRouter>\r\n      <App />\r\n    </BrowserRouter>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}